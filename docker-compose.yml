services:
  # =============================================================================
  # Application Services
  # =============================================================================
  
  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: rippal-backend
    ports:
      - "3000:3000"
      - "3002:3001"
    environment:
      - NODE_ENV=development
      - APP_NAME=rippal
      - APP_PORT=3000
      - APP_HOST=0.0.0.0
      - DEBUG=true
    env_file:
      - .env
    volumes:
      - ./backend:/app/backend
      - ./src:/app/src
      - ./scripts:/app/scripts
      - /opt/ai-models:/opt/ai-models:ro
      - node_modules:/app/node_modules
    depends_on:
      - postgres
      - redis
      - minio
    networks:
      - rippal-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend-build
    container_name: rippal-frontend
    ports:
      - "3001:80"
    environment:
      - NODE_ENV=development
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    networks:
      - rippal-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # Database Services
  # =============================================================================
  
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: rippal-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=rippal_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - rippal-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d rippal_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: rippal-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    networks:
      - rippal-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # =============================================================================
  # Storage Services
  # =============================================================================
  
  # MinIO S3-Compatible Storage
  minio:
    image: minio/minio:latest
    container_name: rippal-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - rippal-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # =============================================================================
  # AI Services
  # =============================================================================
  
  # Local AI Server (Ollama)
  ollama:
    image: ollama/ollama:latest
    container_name: rippal-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
      - /opt/ai-models:/opt/ai-models:ro
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
    networks:
      - rippal-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # =============================================================================
  # Development Tools
  # =============================================================================
  
  # pgAdmin for Database Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: rippal-pgadmin
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@rippal.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - rippal-network
    restart: unless-stopped
    depends_on:
      - postgres

  # Redis Commander for Redis Management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: rippal-redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379:0:redis_password
    networks:
      - rippal-network
    restart: unless-stopped
    depends_on:
      - redis

  # =============================================================================
  # Monitoring Services
  # =============================================================================
  
  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: rippal-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - rippal-network
    restart: unless-stopped

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: rippal-grafana
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3003
      - GF_SERVER_SERVE_FROM_SUB_PATH=false
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - rippal-network
    restart: unless-stopped
    depends_on:
      - prometheus

# =============================================================================
# Networks
# =============================================================================
networks:
  rippal-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# Volumes
# =============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  ollama_data:
    driver: local
  pgadmin_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  node_modules:
    driver: local
  frontend_node_modules:
    driver: local

